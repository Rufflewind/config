#!/usr/bin/env python3
import argparse, os, subprocess, sys, time

def run(*args, check=True, **kwargs):
    return subprocess.run(*args, check=check, **kwargs)

def mkdir_if_not_exist(path):
    try:
        os.mkdir(path)
    except FileExistsError:
        pass

def write_text_if_not_exist(path, text):
    try:
        f = open(path, "x")
    except FileExistsError:
        return
    with f:
        f.write(text)

def run_with_retry(command, *, num_retries, interval):
    errs = []
    for _ in range(num_retries):
        p = subprocess.run(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
        )
        if not p.returncode:
            return None
        errs.append(p.stderr)
        time.sleep(interval)
    return errs

def reinit_container(name, pkgs):
    root = os.path.join("/var/lib/machines", name)

    mkdir_if_not_exist(root)
    run(["pacstrap", "-c", root, "base", *pkgs])

    # https://wiki.archlinux.org/title/Systemd-nspawn#Use_host_networking
    mkdir_if_not_exist("/etc/systemd/nspawn")
    write_text_if_not_exist(
        f"/etc/systemd/nspawn/{name}.nspawn",
        "[Network]\nVirtualEthernet=no\n",
    )
    sys.stderr.write(f"Created: /etc/systemd/nspawn/{name}.nspawn\n")

    run(["machinectl", "start", name])
    errs = run_with_retry(
        ["systemctl", "-M", name, "is-system-running", "--wait"],
        num_retries=10,
        interval=0.3,
    )
    if errs:
        raise SystemExit(f"container: machine is still not running... stderr:\n" + "\n".join(errs) + f"\ntry checking the logs? journalctl -u systemd-nspawn@{name}.service")
    run(["machinectl", "shell", name, "/bin/sh", "-c", """
echo LANG=en_US.UTF-8 >/etc/locale.conf
echo en_US.UTF-8 UTF-8 >/etc/locale.gen
locale-gen
"""])

    sys.stderr.write(f"""
Machine {name} has been started in the background and is ready to use. Use machinectl to interact with it. Example commands:

    sudo machinectl (start|stop|shell) {name}

You can also DELETE the image (i.e. all the files) with "machinectl remove".

To install more packages, use:

    sudo pacstrap -c {root} <pkg>...

""")

def main():
    p = argparse.ArgumentParser(description="tool to initialize Arch systemd-nspawn containers")
    p.add_argument("name", help="name of the container")
    p.add_argument("pkgs", nargs="*", help="pacman packages to install")
    args = p.parse_args()
    reinit_container(**vars(args))

main()
