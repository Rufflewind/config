#!/usr/bin/env python3
import argparse, asyncio, contextlib, os, signal, subprocess, sys

DESCRIPTION = """
Example usage:

    watch-run -- make

    watch-run foo.c bar.c -- ./run-tests.sh

"""

class UserError(Exception):
    pass

class AsyncChildProcess:
    def __init__(self, proc):
        self.proc = proc

    async def __aenter__(self):
        return self.proc

    async def __aexit__(self, exc_type, exc, tb):
        try:
            self.proc.terminate()
            await self.proc.wait()
        except Exception:
            pass

class AsyncChildTask:
    def __init__(self, task):
        self.task = task

    async def __aenter__(self):
        return self.task

    async def __aexit__(self, exc_type, exc, tb):
        try:
            self.task.cancel()
            await self.task
        except Exception:
            pass

class Watcher:
    def __init__(self, paths, cmd):
        self.paths = paths
        self.cmd = cmd
        self.cond = asyncio.Condition()
        self.start = True

    async def main(self):
        try:
            with open(os.devnull, "r") as fdevnull:
                try:
                    p = await asyncio.create_subprocess_exec(
                        "inotifywait", "-m", "-q", "-r",
                        "-e", "close_write", "--", *self.paths,
                        stdin=fdevnull,
                        stdout=subprocess.PIPE)
                except OSError as e:
                    raise UserError("Notifier failure: {}".format(e))
            async with AsyncChildProcess(p):
                runner = asyncio.ensure_future(self.runner())
                async with AsyncChildTask(runner):
                    async for line in p.stdout:
                        self.start = True
                        async with self.cond:
                            self.cond.notify()
                    raise UserError("Notifier exited unexpectedly.")
        except UserError as e:
            sys.stderr.write("\x1b[31;1m[!] {}\x1b[0m\n".format(e))
            sys.stderr.flush()

    async def runner(self):
        while True:
            self.start = False
            sys.stderr.write("\x1b[34;1m[~]\x1b[0;1m Building...\x1b[0m\n")
            sys.stderr.flush()
            try:
                try:
                    p = await asyncio.create_subprocess_exec(*self.cmd)
                except OSError as exc:
                    raise UserError("can't run command: {}".format(exc))
                async with AsyncChildProcess(p):
                    code = await p.wait()
                if code:
                    raise UserError("command exited with: {}".format(code))
            except UserError as e:
                sys.stderr.write("\x1b[31;1m[!] ERROR: {}\x1b[0m\n"
                                 .format(e))
                sys.stderr.flush()
            else:
                sys.stderr.write("\x1b[32;1m[o]\x1b[0;1m Watching...\x1b[0m\n")
                sys.stderr.flush()
            while not self.start:
                async with self.cond:
                    await self.cond.wait()

def parse_args():
    p = argparse.ArgumentParser(
        description=DESCRIPTION,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    p.add_argument("paths", metavar="args", nargs="*", default=["."])
    args = sys.argv[1:]
    try:
        i = args.index("--")
    except ValueError:
        cmd = []
    else:
        cmd = args[(i + 1):]
        args = args[:i]
    args = p.parse_args(args)
    if not cmd:
        p.print_usage(sys.stderr)
        sys.stderr.write("{}: error: expected '--' followed by the command\n"
                         .format(p.prog))
        sys.stderr.flush()
        sys.exit(1)
    return args, cmd

args, cmd = parse_args()
try:
    asyncio.run(Watcher(paths=args.paths, cmd=cmd).main())
    sys.exit(1)
except KeyboardInterrupt:
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    os.kill(os.getpid(), signal.SIGINT)
