#!/usr/bin/env python3
import argparse, base64, hashlib, os, re, sys

def hash_encode(digest):
    return base64.urlsafe_b64encode(digest).decode("latin-1").rstrip("=")

def hash_file(filename, algorithm, blocksize=65536):
    h = algorithm()
    with open(filename, "rb") as f:
        for block in iter(lambda: f.read(blocksize), b""):
            h.update(block)
    return h

def tag_filename(fn, tag, strip=False):
    m = re.match(r"(%|.*)\.[-_0-9A-Za-z]{{{0}}}(\..*|$)"
                 .format(TAG_LEN), fn)
    if m:
        base, ext = m.groups()
    else:
        base, ext = os.path.splitext(fn)
    if strip:
        return tag + ext
    return "{0}.{1}{2}".format(base, tag, ext)

def process_file(fn, remove=False, force=False, rename=True, strip=False):
    '''Process a file, returning the new filename.'''
    tag = ""
    if not remove:
        tag = hash_encode(hash_file(fn, algorithm=HASH).digest())
    new_fn = tag_filename(fn, tag, strip=strip)
    if fn != new_fn and rename:
        if not force and os.path.lexists(new_fn):
            raise ValueError("refusing to overwrite: " +new_fn)
        os.rename(fn, new_fn)
    return new_fn

HASH = hashlib.md5
TAG_LEN = len(hash_encode(HASH().digest()))

opts = argparse.ArgumentParser(
    description="Renames the file to contain its MD5 hash.",
)
opts.add_argument(
    "FILE",
    nargs="+",
    help="filename",
)
opts_modifier = opts.add_mutually_exclusive_group()
opts_modifier.add_argument(
    "-f", "--force",
    action="store_true",
    help="overwrite existing files",
)
opts_modifier.add_argument(
    "-n", "--dry-run",
    action="store_true",
    help="do not perform any renames",
)
opts.add_argument(
    "-p", "--porcelain",
    action="store_true",
    help="print the new names only, without any commentary " +
         "(useful for parsing)",
)
opts_action = opts.add_mutually_exclusive_group()
opts_action.add_argument(
    "-r", "--remove",
    action="store_true",
    help="remove hashes instead of adding them",
)
opts_action.add_argument(
    "-s", "--strip",
    action="store_true",
    help="strip the name portion",
)
args = opts.parse_args()

for fn in args.FILE:
    try:
        new_fn = process_file(fn, remove=args.remove, force=args.force,
                              rename=not args.dry_run, strip=args.strip)
        if args.porcelain:
            print(new_fn)
        elif fn == new_fn:
            print("{0} (unchanged)".format(fn))
        else:
            print("{0} => {1}".format(fn, new_fn))
    except Exception as e:
        sys.stderr.write("{0}: {1}\n".format(sys.argv[0], e))
